// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: Controller/Dto/Proto/product.proto

package Proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DataProduct_DetailProductGrpc_FullMethodName = "/Proto.DataProduct/DetailProductGrpc"
)

// DataProductClient is the client API for DataProduct service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataProductClient interface {
	DetailProductGrpc(ctx context.Context, in *Product, opts ...grpc.CallOption) (*Product, error)
}

type dataProductClient struct {
	cc grpc.ClientConnInterface
}

func NewDataProductClient(cc grpc.ClientConnInterface) DataProductClient {
	return &dataProductClient{cc}
}

func (c *dataProductClient) DetailProductGrpc(ctx context.Context, in *Product, opts ...grpc.CallOption) (*Product, error) {
	out := new(Product)
	err := c.cc.Invoke(ctx, DataProduct_DetailProductGrpc_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataProductServer is the server API for DataProduct service.
// All implementations must embed UnimplementedDataProductServer
// for forward compatibility
type DataProductServer interface {
	DetailProductGrpc(context.Context, *Product) (*Product, error)
	mustEmbedUnimplementedDataProductServer()
}

// UnimplementedDataProductServer must be embedded to have forward compatible implementations.
type UnimplementedDataProductServer struct {
}

func (UnimplementedDataProductServer) DetailProductGrpc(context.Context, *Product) (*Product, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DetailProductGrpc not implemented")
}
func (UnimplementedDataProductServer) mustEmbedUnimplementedDataProductServer() {}

// UnsafeDataProductServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataProductServer will
// result in compilation errors.
type UnsafeDataProductServer interface {
	mustEmbedUnimplementedDataProductServer()
}

func RegisterDataProductServer(s grpc.ServiceRegistrar, srv DataProductServer) {
	s.RegisterService(&DataProduct_ServiceDesc, srv)
}

func _DataProduct_DetailProductGrpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Product)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataProductServer).DetailProductGrpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataProduct_DetailProductGrpc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataProductServer).DetailProductGrpc(ctx, req.(*Product))
	}
	return interceptor(ctx, in, info, handler)
}

// DataProduct_ServiceDesc is the grpc.ServiceDesc for DataProduct service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataProduct_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Proto.DataProduct",
	HandlerType: (*DataProductServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DetailProductGrpc",
			Handler:    _DataProduct_DetailProductGrpc_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Controller/Dto/Proto/product.proto",
}
